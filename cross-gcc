#!/usr/bin/env ruby
# -*- ruby -*-

require 'tempfile'
require 'fileutils'

def error(msg)
    STDERR.puts 'error: ' + msg.to_s
    exit 1
end

def which(cmd)
    pathname = `which #{cmd}`
    error "required executable #{cmd} not found" if $?.exitstatus != 0
    pathname.chomp
end

def system(*argv)
    super

    status = $?.exitstatus
    error "external program #{argv[0]} failed with code #{status}" if status != 0
end

# Main program begins here.
target = File.basename($0)
target.gsub! %r{-gcc$}, ''

clang = which 'clang'
clang_argv = [ '-target', target ]
ld_argv = []
mode = :full
outfile = nil

while arg = ARGV.shift
    case arg
    when '-o'
        outfile = ARGV.shift
    when '-c'
        mode = :object
    when '-S'
        mode = :asm
    when /^-[lL]/
        ld_argv << arg
    when /^-Wl,/
        parts = arg.split /,/
        parts.shift # remove -Wl
        ld_argv.push *parts
    when /^-/
        clang_argv << arg
    else
        # This is a relatively stupid test, but it should remedy the
        # clang warnings about non-source files being passed to clang -c.
        case arg
        when /\.obj$/, /\.o$/
            mode = :link
            ld_argv << arg
        else
            error "Cannot currently handle mixed source and object files" if mode == :link

            infile = arg
            clang_argv << arg
        end
    end
end

temp_output = Tempfile.new 'cross-gcc'
begin
    if mode == :asm
        clang_argv.push *[ '-S', '-o', temp_output.path ]
        system clang, *clang_argv

        infile ||= 'source'
        outfile ||= "#{File.basename(infile, '.*')}.s"
        FileUtils.cp(temp_output.path, outfile)
        exit 0
    elsif mode == :object
        clang_argv.push *[ '-c', '-o', temp_output.path ]
        system clang, *clang_argv

        infile ||= 'source'
        outfile ||= "#{File.basename(infile, '.*')}.o"
        FileUtils.cp(temp_output.path, outfile)
        exit 0
    elsif mode == :full
        clang_argv.push *[ '-c', '-o', temp_output.path ]
        system clang, *clang_argv

        outfile ||= 'a.out'
        linker = which "#{target}-ld"
        ld_argv << temp_output.path
        ld_argv << '-o' << outfile
        ld_argv << '-lmingw32' << '-lmsvcrt'
        system linker, *ld_argv
    elsif mode == :link
        outfile ||= 'a.out'
        linker = which "#{target}-ld"
        ld_argv << '-o' << outfile
        ld_argv << '-lmingw32' << '-lmsvcrt'

        puts linker, *ld_argv
        system linker, *ld_argv
    else
        error "unrecognized mode #{mode.to_s}"
    end
ensure
    temp_output.unlink
end
